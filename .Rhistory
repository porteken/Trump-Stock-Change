library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-fread('train.csv',sep = ';')
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y H:i:s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(quantmod)
library(rtweet)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-fread('train.csv',sep = ';')
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(quantmod)
library(rtweet)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-fread('train.csv',sep = ';')
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%i:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(quantmod)
library(rtweet)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-fread('train.csv',sep = ';')
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%i:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
View(data)
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(quantmod)
library(rtweet)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%i:%s'),tzone='US/Central')
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%m:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
searchspace<-ParamSet$new(list(ParamDbl$new('weights',lower = .001,upper=1000)))
library(paradox)
searchspace<-ParamSet$new(list(ParamDbl$new('weights',lower = .001,upper=1000)))
tuner<-AutoTuner$new(lrn('classif.log_reg'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
library(paradox)
library(mlr3verse)
searchspace<-ParamSet$new(list(ParamDbl$new('weights',lower = .001,upper=1000)))
tuner<-AutoTuner$new(lrn('classif.log_reg'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
model<-tuner$train(task)
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%m:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
data<-sample_n(data,1000)
datatable(head(data))
py_gc <- import("gc")
py_gc$collect()
data<-py$trains
data$date<-date(data$date)
prices<-read.csv('SPY.csv') %>% select('Date','Open','Close')
names(prices)<-c('date','open','close')
prices$date<-date(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(if_else(close>open,'1','0')),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text','open','close'))
data$is_retweet<-as.numeric(data$is_retweet)-1
train<-data[1:round(nrow(data)*.95-1,0),]
test<-data[round(nrow(data)*.95-1,0):nrow(data),]
data.table(data)
lgr::get_logger("mlr3")$set_threshold("warn")
task<-TaskClassif$new('task',train,'change',positive='1')
benchmarks<-benchmark_grid(task,list(lrn('classif.xgboost'),lrn('classif.ranger'),lrn('classif.svm'),lrn('classif.log_reg'),lrn('classif.naive_bayes')),rsmp('cv',folds=10))
future::plan('multiprocess')
bench<-benchmark(benchmarks)
bench$aggregate() %>% arrange(classif.ce)
searchspace<-ParamSet$new(list(ParamDbl$new('weights',lower = .001,upper=1000)))
tuner<-AutoTuner$new(lrn('classif.log_reg'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
model<-tuner$train(task)
library(stats)
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%m:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
data<-sample_n(data,1000)
datatable(head(data))
py_gc <- import("gc")
py_gc$collect()
data<-py$trains
data$date<-date(data$date)
prices<-read.csv('SPY.csv') %>% select('Date','Open','Close')
names(prices)<-c('date','open','close')
prices$date<-date(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(if_else(close>open,'1','0')),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text','open','close'))
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%m:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
data<-sample_n(data,1000)
datatable(head(data))
py_gc <- import("gc")
py_gc$collect()
data<-py$trains
data$date<-date(data$date)
prices<-read.csv('SPY.csv') %>% select('Date','Open','Close')
names(prices)<-c('date','open','close')
prices$date<-date(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(if_else(close>open,'1','0')),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text','open','close'))
library(paradox)
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct('kernal',c('linear','polynomial','radial basis','sigmoid'))))
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct('kernal',c('linear','polynomial','radial basis','sigmoid'))))
library(paradox)
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct('kernal',c('linear','polynomial','radial basis','sigmoid'))))
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct$new('kernal',c('linear','polynomial','radial basis','sigmoid'))))
tuner<-AutoTuner$new(lrn('classif.svm',type='C-classification'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
library(mlr3verse)
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct$new('kernal',c('linear','polynomial','radial basis','sigmoid'))))
tuner<-AutoTuner$new(lrn('classif.svm',type='C-classification'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
model<-tuner$train(task)
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct$new('kernel',c('linear','polynomial','radial basis','sigmoid'))))
tuner<-AutoTuner$new(lrn('classif.svm',type='C-classification'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
model<-tuner$train(task)
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct$new('kernel',c('linear','polynomial','radial','sigmoid'))))
tuner<-AutoTuner$new(lrn('classif.svm',type='C-classification'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
model<-tuner$train(task)
searchspace<-ParamSet$new(list(ParamDbl$new('cost',lower = .1,upper=100),ParamDbl$new('gamma',lower = .0001,upper=10),ParamFct$new('kernel',c('polynomial','radial','sigmoid'))))
tuner<-AutoTuner$new(lrn('classif.svm',type='C-classification'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
model<-tuner$train(task)
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%m:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
data<-sample_n(data,2000)
datatable(head(data))
py_gc <- import("gc")
py_gc$collect()
data<-read.csv('train.csv')
data$date<-date(data$date)
prices<-read.csv('SPY.csv') %>% select('Date','Open','Close')
names(prices)<-c('date','open','close')
prices$date<-date(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(if_else(close>open,'1','0')),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text','open','close'))
View(train)
View(data)
data<-read.csv('train.csv')
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%m:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
data<-sample_n(data,1000)
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
data<-data[!is.na(data$created_at)]
data$created_at<-with_tz(parse_date_time(data$created_at,'%m-%d-%Y %H:%m:%s'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
data<-sample_n(data,1000)
datatable(head(data))
py_gc <- import("gc")
py_gc$collect()
data<-read.csv('trains.csv')
data$date<-date(data$date)
prices<-read.csv('SPY.csv') %>% select('Date','Open','Close')
names(prices)<-c('date','open','close')
prices$date<-date(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(if_else(close>open,'1','0')),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text','open','close'))
data$is_retweet<-as.numeric(data$is_retweet)-1
train<-data[1:round(nrow(data)*.95-1,0),]
test<-data[round(nrow(data)*.95-1,0):nrow(data),]
data.table(data)
py_gc <- import("gc")
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(mlr3verse)
library(mlr3measures)
use_condaenv('data',required=T)
py_gc <- import("gc")
py_gc$collect()
data<-fread('train.csv',quote="")
py_gc <- import("gc")
py_gc$collect()
data<-read.csv('trains.csv')
data$date<-date(data$date)
prices<-read.csv('SPY.csv') %>% select('Date','Open','Close')
names(prices)<-c('date','open','close')
prices$date<-date(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(if_else(close>open,'1','0')),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text','open','close'))
data$is_retweet<-as.numeric(data$is_retweet)-1
train<-data[1:round(nrow(data)*.95-1,0),]
test<-data[round(nrow(data)*.95-1,0):nrow(data),]
data.table(data)
lgr::get_logger("mlr3")$set_threshold("warn")
task<-TaskClassif$new('task',train,'change',positive='1')
benchmarks<-benchmark_grid(task,list(lrn('classif.xgboost'),lrn('classif.ranger'),lrn('classif.svm'),lrn('classif.log_reg'),lrn('classif.naive_bayes')),rsmp('cv',folds=10))
future::plan('multiprocess')
bench<-benchmark(benchmarks)
bench$aggregate() %>% arrange(classif.ce)
searchspace<-ParamSet$new(list(ParamInt$new('num.trees',lower = 100,upper=1200),ParamInt$new('max.depth',lower=5,upper=30)))
tuner<-AutoTuner$new(lrn('classif.ranger'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,term('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
searchspace<-ParamSet$new(list(ParamInt$new('num.trees',lower = 100,upper=1200),ParamInt$new('max.depth',lower=5,upper=30)))
tuner<-AutoTuner$new(lrn('classif.ranger'),rsmp('cv',folds=10),msr('classif.ce'),searchspace,trm('evals',n_evals=36),mlr3tuning::tnr('random_search',batch_size=36))
model<-tuner$train(task)
model$tuning_result
testing<-TaskClassif$new('test',test,'change',positive='1')
result<-model$predict(testing)
confusion_matrix(result$truth,result$response,positive='1')
