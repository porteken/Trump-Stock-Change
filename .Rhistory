combined <- cbind(DFnorm, DFdummies)
# Chunk 30
task<-makeRegrTask(data=combined[!is.na(combined$SalePrice)],target='SalePrice')
result<-autoxgboost(task)
result
install.packages("EFS")
#install.packages('DataExplorer')
#install.packages('mlr3verse')
#install.packages('VIM')
#install.packages('doParallel')
#install.packages('randomForest')
#install.packages("rBayesianOptimization")
#install.packages("ParBayesianOptimization")
#install.packages('corrplot')
library(psych)
library(corrplot)
library(doParallel)
library(DataExplorer)
library(xgboost)
library(randomForest)
library(ParBayesianOptimization)
library(VIM)
library(caret)
library(autoxgboost)
library(tidyverse)
library(doParallel)
future::plan('multicore')
cl <- makeCluster(4)
all<-rbind(train,test)
introduce(all)
plot_intro(all)
plot_missing(all,missing_only=TRUE)
all<-drop_columns(all,c("PoolQC","MiscFeature","Alley","Fence","FireplaceQu"))
all$age<-as.numeric(all$YrSold)-all$YearRemodAdd
all$house_sqft<-all$GrLivArea + all$TotalBsmtSF
all$porch_sqft<-all$OpenPorchSF + all$EnclosedPorch + all$X3SsnPorch + all$ScreenPorch
all<-drop_columns(all,c('YearRemodAdd','YearBuilt','GrLivArea','GarageYrBlt','TotalBsmtSF','OpenPorchSF','EnclosedPorch','X3SsnPorch','ScreenPorch'))
all$pool<-as.factor(ifelse(all$PoolArea>0,1,0))
all<-drop_columns(all,'PoolArea')
plot_missing(all,missing_only=TRUE)
# Chunk 1
#install.packages('DataExplorer')
#install.packages('mlr3verse')
#install.packages('VIM')
#install.packages('doParallel')
#install.packages('randomForest')
#install.packages("rBayesianOptimization")
#install.packages("ParBayesianOptimization")
#install.packages('corrplot')
library(psych)
library(corrplot)
library(doParallel)
library(DataExplorer)
library(xgboost)
library(randomForest)
library(ParBayesianOptimization)
library(VIM)
library(caret)
library(autoxgboost)
library(tidyverse)
library(doParallel)
future::plan('multicore')
cl <- makeCluster(4)
# Chunk 2
train<-read.csv('house-prices-advanced-regression-techniques/train.csv',stringsAsFactors=F)
head(train)
# Chunk 3
test<-read.csv('house-prices-advanced-regression-techniques/test.csv',stringsAsFactors=F)
test$SalePrice<-NA
labels<-test$Id
head(test)
# Chunk 4
sample<-read.csv('house-prices-advanced-regression-techniques/sample_submission.csv')
head(sample)
# Chunk 5
all<-rbind(train,test)
introduce(all)
# Chunk 6
plot_intro(all)
# Chunk 7
plot_missing(all,missing_only=TRUE)
all<-drop_columns(all,c("PoolQC","MiscFeature","Alley","Fence","FireplaceQu"))
# Chunk 8
plot_histogram(all)
# Chunk 9
all<-drop_columns(all,"KitchenAbvGr")
all$DecadeGarageBlt<-ifelse(!is.na(all$GarageYrBlt),round(all$GarageYrBlt/10)*10,'None')
all$DecadeBlt<-round(all$YearBuilt/10)*10
all$remodeled<-ifelse(all$YearBuilt==all$YearRemodAdd,0,1)
all$new<-ifelse(all$YearBuilt==all$YrSold,1,0)
all<-update_columns(all,c("HalfBath","FullBath",'remodeled','new','DecadeGarageBlt','DecadeBlt','BsmtHalfBath','MSSubClass',"Fireplaces",'YrSold',"GarageCars","BsmtFullBath","BedroomAbvGr","TotRmsAbvGrd","MoSold","OverallQual","OverallCond"),as.factor)
# Chunk 10
all$age<-as.numeric(all$YrSold)-all$YearRemodAdd
all$house_sqft<-all$GrLivArea + all$TotalBsmtSF
all$porch_sqft<-all$OpenPorchSF + all$EnclosedPorch + all$X3SsnPorch + all$ScreenPorch
all<-drop_columns(all,c('YearRemodAdd','YearBuilt','GrLivArea','GarageYrBlt','TotalBsmtSF','OpenPorchSF','EnclosedPorch','X3SsnPorch','ScreenPorch'))
# Chunk 11
plot_bar(all)
# Chunk 12
all<-drop_columns(all,c('Street','Utilities','LandContour','Condition2','Condition1','RoofMatl','Heating','BsmtFinType2','CentralAir','Electrical','Functional','GarageQual','GarageCond','BsmtCond'))
# Chunk 13
all$pool<-as.factor(ifelse(all$PoolArea>0,1,0))
all<-drop_columns(all,'PoolArea')
# Chunk 14
plot_missing(all,missing_only=TRUE)
# Chunk 15
na<-which(colSums(is.na(all)) > 0)
na_num<-names(which(colSums(is.na(all %>% select_if(is.numeric) %>% select(-one_of('SalePrice')))) > 0))
na_str<-names(which(colSums(is.na(all  %>% select_if(negate(is.numeric)))) > 0))
na
# Chunk 16
all[na_num]<-kNN(all[na_num])
# Chunk 17
sapply(as.data.frame(sapply(all[na_str],as.factor)),levels)
# Chunk 18
print(which(colSums(is.na(all)) > 0))
# Chunk 19
for (s in na_str)
{
all[s][is.na(all[s])]<-'None'
}
na<-which(colSums(is.na(all)) > 0)
for (s in na)
{
all[s][is.na(all[s])]<-'0'
}
# Chunk 20
which(colSums(is.na(all)) > 0)
# Chunk 21
char<-colnames(all %>% select_if(is.character))
all<-update_columns(all,char,as.factor)
# Chunk 22
colnames(all %>% select_if(is.factor))
# Chunk 23
all$Bath<-as.factor(as.numeric(all$BsmtFullBath)+as.numeric(all$BsmtHalfBath)*.5+as.numeric(all$FullBath)+as.numeric(all$HalfBath)*.5)
all<-drop_columns(all,c('BsmtFullBath','FullBath','HalfBath','BsmtHalfBath'))
# Chunk 24
colnames(all %>% select_if(is.numeric))
# Chunk 25
corrplot.mixed(cor(all %>% select_if(is.numeric)))
# Chunk 26
hc=findCorrelation(cor(all %>% select_if(is.numeric)), cutoff=0.1)
all=all[,-hc]
# Chunk 27
set.seed(2020)
x=all[!is.na(all$SalePrice),] %>% select(-one_of('SalePrice'))
y=all$SalePrice[!is.na(all$SalePrice)]
quick_RF <- randomForest(x,y, ntree=100,importance=TRUE)
imp_RF <- importance(quick_RF)
imp_DF <- data.frame(Variables = row.names(imp_RF), MSE = imp_RF[,1])
imp_DF <- imp_DF[order(imp_DF$MSE, decreasing = TRUE),]
ggplot(imp_DF[1:20,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= '% increase MSE if variable is randomly permuted') + coord_flip() + theme(legend.position="none")
# Chunk 28
plot_qq(all,sampled_rows=1000L)
# Chunk 29
DFnumeric<-all %>% select_if(is.numeric) %>% select(-one_of('SalePrice'))
for(i in 1:ncol(DFnumeric))
{
if (abs(skew(DFnumeric[,i]))>0.8)
{
DFnumeric[,i] <- log(DFnumeric[,i] +1)
}
}
PreNum<-preProcess(DFnumeric, method=c("center", "scale"))
DFnorm <- predict(PreNum, DFnumeric)
DFnorm$SalePrice<-log(all$SalePrice)
DFfactors<-all %>% select_if(is.factor)
DFdummies <- as.data.frame(model.matrix(~.-1, DFfactors))
fewOnes <- which(colSums(DFdummies[1:nrow(all[!is.na(all$SalePrice),]),])<10)
DFdummies <- DFdummies[,-fewOnes]
combined <- cbind(DFnorm, DFdummies)
# Chunk 30
task<-makeRegrTask(data=combined[!is.na(combined$SalePrice)],target='SalePrice')
result<-autoxgboost(task)
result
install.packages('mlr3verse')
install.packages('mlr3verse',dependencies=T)
install.packages('caret')
install.packages('tidyverse')
install.packages('kableExtra')
install.packages('plotly')
install.packages('dataExplorer')
install.packages('DataExplorer')
install.packages('DT')
install.packages('datatable')
install.packages("data.table")
install.packages('doParaell')
install.packages("doParallel")
install.packages('quantmod')
install.packages('prophet')
install.packages('reticulate')
install.packages('shiny')
install.packages('RCrawler')
install.packages('RCrawler')
install.packages('Rcrawler')
install.packages('RMarkdown')
install.packages('rmarkdown')
install.packages('rtweet')
install.packages('Installr')
install.packages('installr')
install.packages('DALEX')
install.packages('gpuR')
install.packages('iml')
install.packages(c("backports", "dplyr", "ellipsis", "glue", "reticulate", "rlang"))
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nlme", "nnet", "spatial"), lib="C:/Program Files/R/R-4.0.0/library")
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(quantmod)
library(rtweet)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(fable)
library(data.table)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
data<-fread('train.csv')
data$created_at<-with_tz(parse_date_time(data$created_at,'%m/%d/%Y H:M'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
datatable(head(data))
data<-py$trains
data2<-data
data$date<-date(data$date)
prices<-fread('SPY 2.csv',col.names = c('date','change'))
prices2<-prices
prices$date<-mdy(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(change),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text'))
View(data2)
View(prices2)
View(prices)
View(prices2)
fread('SPY 2.csv',col.names = c('date','change'))
View(data2)
View(data)
str(data)
data<-py$trains
data2<-data
data$date<-date(data$date)
prices<-read.csv('SPY 2.csv',col.names = c('date','change'))
prices2<-prices
prices$date<-mdy(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(change),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text'))
data$is_retweet<-as.numeric(data$is_retweet)-1
train<-data[1:round(nrow(data)*.95-1,0),]
test<-data[round(nrow(data)*.95-1,0):nrow(data),]
data.table(data)
rm(ls())
pwd
pwd()\
library(reticulate)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(reticulate)
library(quantmod)
library(rtweet)
library(data.table)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(fable)
library(data.table)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
data<-fread('train.csv')
data$created_at<-with_tz(parse_date_time(data$created_at,'%m/%d/%Y H:M'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
datatable(head(data))
data<-py$trains
data$date<-date(data$date)
prices<-read.csv('SPY 2.csv',col.names = c('date','change'))
prices$date<-mdy(prices$date)
data<-full_join(data,prices,by='date')
data<-data %>% mutate(weekend=if_else(wday(date) %in% c(6,7),1,0),change=as.factor(change),score=lead(score,1))  %>%  fill(change,.direction='up') %>% filter(score>0) %>% select(-one_of('date','text'))
data$is_retweet<-as.numeric(data$is_retweet)-1
train<-data[1:round(nrow(data)*.95-1,0),]
test<-data[round(nrow(data)*.95-1,0):nrow(data),]
data.table(data)
lgr::get_logger("mlr3")$set_threshold("warn")
task<-TaskClassif$new('task',train,'change',positive='1')
benchmarks<-benchmark_grid(task,list(lrn('classif.xgboost'),lrn('classif.ranger'),lrn('classif.svm'),lrn('classif.log_reg'),lrn('classif.naive_bayes')),rsmp('cv',folds=10))
future::plan('multicore')
bench<-benchmark(benchmarks)
bench$aggregate() %>% arrange(classif.ce)
tuner<-tnr('random_search',batch_size=36)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(quantmod)
library(rtweet)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
library(RBERT)
library(data.table)
library(tensorflow)
library(reticulate)
use_condaenv('data',required=T)
tensorflow::install_tensorflow(version='1.13.1')
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(quantmod)
library(rtweet)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
library(RBERT)
library(data.table)
library(tensorflow)
library(reticulate)
use_condaenv('data',required=T)
tensorflow::install_tensorflow(version='1.13.1')
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(quantmod)
library(rtweet)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
library(RBERT)
library(data.table)
library(tensorflow)
library(reticulate)
use_python('/home/miniconda3/envs/data/bin/python3',required=T)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(quantmod)
library(rtweet)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
library(RBERT)
library(data.table)
library(tensorflow)
library(reticulate)
use_python('/home/kennethporter/miniconda3/envs/data/bin/python3',required=T)
tensorflow::install_tensorflow(version='1.13.1')
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(quantmod)
library(rtweet)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
library(RBERT)
library(data.table)
library(tensorflow)
library(reticulate)
use_python('/home/kennethporter/miniconda3/envs/data/bin/python3',required=T)
data<-fread('train.csv')
data$created_at<-with_tz(parse_date_time(data$created_at,'%m/%d/%Y H:M'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
datatable(head(data))
BERT_PRETRAINED_DIR <- RBERT::download_BERT_checkpoint(model = "bert_base_uncased")
BERT_feats <- extract_features(examples = data$text, model='bert_base_uncased',batch_size = 1000L)
if (Sys.info()[['sysname']]=='Windows')
{
# update executable path in sys module
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
}
library(tidyverse)
library(quantmod)
library(rtweet)
library(lubridate)
library(e1071)
library(DT)
library(feasts)
library(caret)
library(tsibble)
library(mlr3verse)
library(mlr3measures)
library(RBERT)
library(data.table)
library(tensorflow)
library(reticulate)
use_python('/home/kennethporter/miniconda3/envs/data/bin/python3',required=T)
data<-fread('train.csv')
data$created_at<-with_tz(parse_date_time(data$created_at,'%m/%d/%Y H:M'),tzone='US/Central')
dim(data)
data<-data %>% mutate(date=if_else(am(created_at) | wday(created_at) %in% c(7,1),date(created_at),date(created_at+days(1))),is_retweet=as.factor(if_else(is_retweet=='TRUE',1,0))) %>% select(-one_of('created_at'))
dim(data)
data$text<-gsub('http\\S+\\s*','',data$text)
data$text<-gsub("[^0-9A-Za-z///' ]",'',data$text,ignore.case = T)
data<-data %>% filter(text!='')
datatable(head(data))
BERT_PRETRAINED_DIR <- RBERT::download_BERT_checkpoint(model = "bert_base_uncased")
BERT_feats <- extract_features(examples = data$text, model='bert_base_uncased',batch_size = 1000L)
